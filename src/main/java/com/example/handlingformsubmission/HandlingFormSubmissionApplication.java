package com.example.handlingformsubmission;

import org.springframework.beans.BeanWrapperImpl;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;

import java.beans.PropertyDescriptor;
import java.util.HashSet;
import java.util.Optional;

@SpringBootApplication
public class HandlingFormSubmissionApplication extends SpringBootServletInitializer {

	public static void main(String[] args) {
		SpringApplication.run(HandlingFormSubmissionApplication.class, args);
	}

	public static HashSet<String> findWritablePds(Object root, String path, int depth, HashSet<Object> visited) {

		if (visited == null) {
			visited = new HashSet<>();
			visited.add(Integer.class);
			visited.add(Long.class);
			visited.add(Double.class);
			visited.add(String.class);
		}

		HashSet<String> res = new HashSet<>();

		if (depth <= 0) return res;
		if (visited.contains(root)) return res;
		else visited.add(root);

		try {
			BeanWrapperImpl impl = new BeanWrapperImpl(root);

			for (PropertyDescriptor pd : impl.getPropertyDescriptors()) {
				if (!impl.isReadableProperty(pd.getName())) continue;
				if (pd.getName().equals("accessible")) continue;

				if (impl.isWritableProperty(pd.getName())) {
					res.add(path + "." + pd.getName());
				}

				Object value = impl.getPropertyValue(pd.getName());

				if (value != null && value != Optional.empty()) {
					res.addAll(findWritablePds(value, path + "." + pd.getName(), depth - 1, visited));

					if (value.getClass().isArray()) {
						try {
							Object[] casted = (Object[]) value;

							for (int i = 0; i < casted.length; i++) {
								res.addAll(findWritablePds(casted[i], path + "." + pd.getName() + "[" + i + "]", depth - 1, visited));
							}
						} catch (ClassCastException cce) {
							System.err.println("Exception casting class " + value.getClass().getCanonicalName() + ": " + cce.getMessage());
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return res;
	}
}
